#include <cstdlib>
#include <cstdio>
#include <iostream>
#include <sstream>
#include <cstring>
#include <string>
#include <utility>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <algorithm>
#include <functional>
#include <cmath>
#include <list>
#include <set>
using namespace std;

typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;
#define rep(i,a,b) for((i)=(a);(i)<=(b);(i)++)
vector<vii> adj_list;

vi dist, factors, humble_nos;

//BEFORE SUBMISSION, COMMENT OUT THIS LINE--> freopen("text", "r", stdin);

int main() {
	long int l, a, b, c, m, n, i, x, y, j, k, t, sum = 0, cases = 1, maximum,
			minimum, count1 = 0;
	freopen("text", "r", stdin);
	factors.push_back(2);
	factors.push_back(3);
	factors.push_back(5);
	factors.push_back(7);
	humble_nos.push_back(1);
	while (1) {
		scanf("%ld", &n);
		if (n == 0)
			break;
		int rem = n % 20;
		switch (rem) {
		case 1: {
			printf("The %ldst humble number is ", n);
			break;
		}
		case 2: {
			printf("The %ldnd humble number is ", n);
			break;
		}
		case 3: {
			printf("The %ldrd humble number is ", n);
			break;
		}
		default:
			printf("The %ldth humble number is ", n);
		}
		if (n <= humble_nos.size()) {
			printf("%ld\n", humble_nos[n - 1]);
			continue;
		}
		count1 = humble_nos.size();
		x = humble_nos[count1 - 1];
		k = x;
		while (count1 < n) {
			x = ++k;
			while (x > 1) {
				bool divisible = false;
				rep(i,0,3)
				{
					if (x % factors[i] == 0) {
						divisible = true;
						x /= factors[i];
					}
				}
				if (divisible == false)
					break;
			}
			if (x == 1)
				humble_nos.push_back(k);
			count1 = humble_nos.size();
		}
		printf("%ld.\n", humble_nos[n - 1]);
	}
	return 0;
}
