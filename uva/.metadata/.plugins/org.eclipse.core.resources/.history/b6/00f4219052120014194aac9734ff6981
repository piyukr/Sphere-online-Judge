#include <cstdlib>
#include <cstdio>
#include <iostream>
#include <sstream>
#include <cstring>
#include <string>
#include <utility>
#include <stack>
#include <queue>
#include <vector>
#include <map>
#include <algorithm>
#include <functional>
#include <cmath>
#include <list>
#include <set>
using namespace std;

typedef pair<int, int> ii;
typedef vector<int> vi;
typedef vector<ii> vii;
#define rep(i,a,b) for((i)=(a);(i)<=(b);(i)++)
vector<vii> adj_list;
map<int, int> time1;
vi dist(26, 9999);
int mem[27][27];
vi visited, toporder;

void toposort(int x) {
	visited[x] = 1;
	int i;
	for (i = 0; i < (int) adj_list[x].size(); i++) {
		if (visited[adj_list[x][i].first] == 1)
			continue;
		toposort(adj_list[x][i].first);
	}
	toporder.push_back(x);
}

int main() {
	int minimum = 9999, i, l, k, j, t;
	scanf("%d", &t);
	getchar();
	while (t--) {
		rep(i,0,27)
			rep(j,0,27)
				mem[i][j] = 9999;
		string a;
		getline(cin, a);
		int count1 = 0;
		while (getline(cin, a)) {
			if (a == "")
				break;
			time1[a[0] - 'A'] = a[2] - '0';
			for (i = 4; a[i] != '\0'; i++)
				adj_list[a[i] - 'a'].push_back(ii(a[0] - 'A', '0' - a[2]));
			count1++;
		}
		visited.assign(count1, 0);
		toporder.clear();
		for (i = 0; i < count1; i++) {
			if (visited[i] == 0)
				toposort(i);
		}
		for (l = toporder.size() - 1; l >= 0; l--)
			printf("%d ", toporder[l]);
		for (l = toporder.size() - 1; l >= 0; l--) {
			if (visited[l] == 1)
				continue;
			for (k = 0; k < count1 - 1; k++)
				for (i = 0; i < count1; i++)
					for (j = 0; j < (int) adj_list[i].size(); j++) {
						ii v = adj_list[i][j];
						if (j == i)
							continue;
						if (mem[i][v.first]
								> mem[i][v.first] + v.second + time1[i])
							mem[i][v.first] = mem[i][v.first] + v.second
									+ time1[i];
					}
		}
		for (i = 0; i < 27; i++)
			for (j = 0; j < 27; j++)
				minimum = min(minimum, mem[i][j]);
		printf("%d\n", -1 * minimum);
		if (t != 0)
			printf("\n");
	}
	return 0;
}
